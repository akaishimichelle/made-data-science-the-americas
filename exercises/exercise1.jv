//Exercise 1

pipeline AirportsPipeline {

  AirportsExtractor
   -> AirportsTextFileInterpreter;

AirportsTextFileInterpreter
    -> AirportsCSVInterpreter
   // -> AirportDataSelector
    -> AirportsTableInterpreter
    -> AirportsLoader;


  //Blocks Description

  block AirportsExtractor oftype HttpExtractor { //None --> Binary File

    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }

  block AirportsTextFileInterpreter oftype TextFileInterpreter {} //File --> Text file
   
  block AirportsCSVInterpreter oftype CSVInterpreter { //Text file --> Sheet
    delimiter: ";";
  }

  block AirportDataSelector oftype CellRangeSelector { //Sheet --> Sheet
  select: range A1:I*;                                 //not selecting columns: Zeitzone, DST, Zeitzonen-Datenbank, geo_punkt
 }


  block AirportsTableInterpreter oftype TableInterpreter { //Sheet --> Table
    header: true;
    columns: [
      "Lfd. Nummer" oftype integer,
      "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype text, //num and text both
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
      "Altitude" oftype integer,
    ];
  }

  // 15. As a last step, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.
  block AirportsLoader oftype SQLiteLoader { //Table --> None
    table: "airports";
    file: "./airports.sqlite";
  }
}